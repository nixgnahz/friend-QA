<style lang="less">
  .top {
    margin-top: 25rpx;
  }
  .type {
    width: 100%;
    font-size: 25rpx;
    .things {
      width: 330rpx;
      margin: 50rpx auto;
      background: #fff;
      border-radius: 40rpx;
      display: flex;
      flex-direction: row;
      justify-content: space-around;
      align-items: center;
      image {
        width: 40rpx;
        height: 40rpx;
        margin: 15rpx 35rpx;
      }
      .text {
        margin-right: 50rpx;
      }
    }
  }
</style>

<template>
  <block wx:if="{{showQus}}">
    <process :length="10" :processIndex.sync="qusIndex"></process>
    <view class="type">
      <view class="things">
        <image src="http://wx.11babay.cn/uploads/Q/Qdh4nAHglce5Bkn7PTKf/5/0/1/d/5c04d40ea75f6.jpg"></image>
        <view class="text">100%原创题库</view>
      </view>
    </view>
    <question :question.sync="question"></question>
    <next :btnText.sync="btnText"></next>
  </block>
  <pay wx:else :fee="fee" :totalMoney.sync="totalMoney" :averageMoney.sync="averageMoney">
    <view slot="input">
      <moneyInput tip="红包金额" type="digit" :value="money" unit="元"></moneyInput>
      <countInput tip="红包个数" type="number" :value="count" unit="个"></countInput>
      <rightInput tip="需要答对" type="number" :value="right" unit="题"></rightInput>
    </view>
  </pay>
</template>

<script>
  import wepy from 'wepy'
  import Process from '@/components/setQus/process'
  import Question from '@/components/setQus/question'
  import Next from '@/components/setQus/next'
  import Pay from '@/components/setQus/pay'
  import InputItem from '@/components/setQus/inputItem'
  import fetch from '@/api/fetch.js'
  import pay from '@/api/pay.js'
  import { toast } from '@/api/common.js'

  export default class SetQus extends wepy.page {
    components = {
      process: Process,
      question: Question,
      next: Next,
      pay: Pay,
      moneyInput: InputItem,
      countInput: InputItem,
      rightInput: InputItem
    }

    selectedQus = []
    questions = []
    index = 0
    sheetid = ''
    uuid = ''
    waitFlag = 1

    data = {
      showQus: true,
      qusIndex: 1,
      question: {},
      money: 1,
      count: 1,
      right: 5,
      fee: 1,
      btnText: '下一题'
    }

    computed = {
      totalMoney () {
        return Math.ceil(this.money * (100 + this.fee)) / 100
      },
      averageMoney () {
        return Math.floor(this.money * 100 / this.count) / 100 || 0
      }
    }

    onLoad () {
      this.getQuestionData()
    }

    onUnload () {
      this.selectedQus = []
      this.questions = []
      this.index = 0
      this.waitFlag = 1
    }

    events = {
      changeQus () {
        this.setQus()
      },
      chooseAnswer (index) {
        for (let item of this.question.answer) {
          item.checked = false
        }
        this.question.answer[index].checked = true
      },
      submit () {
        let status = ''
        for (let item of this.question.answer) {
          if (item.checked) status = item.status
        }
        if (!status) {
          toast('您还没有作出选择呢～')
          return
        }
        this.questions.splice(this.index, 1)
        this.selectedQus.push({
          id: this.question.id,
          answer: status
        })
        if (this.qusIndex >= 10 && this.selectedQus.length >= 10) {
          this.createSheet()
          return
        }
        this.qusIndex = this.qusIndex + 1
        this.setQus()
        if (this.qusIndex > 9) {
          this.btnText = '提交'
        }
      },
      createRedPocket () {
        if (parseInt(this.money) < 1 || parseInt(this.money) > 100) {
          toast('红包金额只能在1-200之间哦～')
          return
        }
        if (parseInt(this.count) < 1 || parseInt(this.count) > 20) {
          toast('红包个数只能在1-20之间哦～')
          return
        }
        if (parseInt(this.right) < 1 || parseInt(this.right) > 10) {
          toast('答对数量只能在1-10之间哦～')
          return
        }
        if (this.averageMoney < 0.3) {
          toast('人均需要大于0.3元哦～')
          return
        }
        this.createOrder()
      }
    }

    async getQuestionData () {
      this.questions = await fetch('/dati/questions')
      this.setQus()
    }

    setQus () {
      this.index = Math.floor(Math.random() * this.questions.length)
      const {id, question, yes, no} = this.questions[this.index]
      let qus = {
        id,
        question,
        answer: [
          { status: 'yes', checked: false, text: yes },
          { status: 'no', checked: false, text: no }
        ]
      }
      this.question = qus
      this.$apply()
    }

    createSheet () {
      fetch(`/dati/sheets/create?session3rd=${this.$parent.session}`, {
        questions: this.selectedQus
      }).then((data) => {
        this.sheetid = data.uuid
        this.showQus = false
        this.$apply()
      }).catch(() => {
        toast('创建失败')
      })
    }

    createOrder () {
      if (!this.waitFlag) return
      this.waitFlag = 0
      fetch(`/create?session3rd=${this.$parent.session}`, {
        type: 'dati',
        money: parseInt(this.money * 100),
        moneyWithFee: parseInt(this.totalMoney * 100),
        count: this.count,
        customData: {
          sheet: this.sheetid,
          portrait: this.$parent.userInfo.portrait,
          name: this.$parent.userInfo.wechaname,
          start: this.right
        }
      }).then((data) => {
        this.uuid = data.uuid
        this.payOrder()
      }).catch((res) => {
        this.payFail()
      })
    }

    payOrder () {
      pay(this.$parent.session, this.$parent.token, {
        game_id: this.$parent.id,
        type: 'new_red_packet',
        other: this.uuid,
        commit_id: this.$parent.commitid,
        price: this.totalMoney
      }).then((res) => {
        const data = JSON.parse(res.data.data)
        wepy.requestPayment({
          timeStamp: data.timeStamp,
          nonceStr: data.nonceStr,
          package: data.package,
          signType: 'MD5',
          paySign: data.paySign
        }).then(() => {
          this.paySuccess()
        }).catch(() => {
          this.payFail()
        })
      })
    }

    paySuccess () {
      wepy.redirectTo({
        url: `./share?ud=${this.uuid}`
      })
    }

    payFail () {
      toast('支付失败')
      this.waitFlag = 1
    }
  }
</script>
